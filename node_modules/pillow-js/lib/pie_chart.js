(function() {
  var ChartAbstract, PieChart,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.$ == null) {
    window.$ = require('jquery-commonjs');
  }

  ChartAbstract = require('./chart_abstract');

  PieChart = (function(_super) {
    __extends(PieChart, _super);

    PieChart.prototype.defaults = {
      limit: 3,
      reverseColors: false,
      formatTooltipHtml: null,
      tooltips: false
    };

    function PieChart(options) {
      var $slice, index, slice, _i, _len, _ref;
      PieChart.__super__.constructor.apply(this, arguments);
      $.extend(this.options, ChartAbstract.prototype.defaults, this.defaults, options);
      if (this.options.formatTooltipHtml == null) {
        this.options.formatTooltipHtml = function(series) {
          return $('<div></div>').addClass('pillow-tooltip').text("" + series + "%");
        };
      }
      this.meta = $.extend({}, this.meta, {
        zeroAngle: 0,
        maxAngle: 360,
        maxSliceAngle: 180,
        series: [],
        slices: []
      });
      this.loadSeries();
      this.loadSlices();
      _ref = this.meta.slices;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        slice = _ref[index];
        $slice = this.createSliceElement(slice.offset, slice.position, slice.color);
        this.$el.append($slice);
        if (this.options.tooltips) {
          $slice.find('.fill').on('mouseover', (function(_this) {
            return function(e) {
              return _this.handleMouseOver(e);
            };
          })(this)).on('mouseout', (function(_this) {
            return function(e) {
              return _this.handleMouseOut(e);
            };
          })(this));
        }
      }
      $('<div></div>').addClass('smooth-edge').appendTo(this.$el);
    }

    PieChart.prototype.createSliceElement = function(offset, position, color) {
      var fill, seriesClass, slice;
      slice = $('<div></div>').addClass('slice');
      seriesClass = this.options.reverseColors ? "series-" + (this.data.length - 1 - position) : "series-" + position;
      fill = $('<div></div>').addClass('fill').addClass(seriesClass).data('seriesIndex', position).appendTo(slice);
      if (color) {
        fill.css('background-color', color);
      }
      this.rotate(slice, offset);
      return slice;
    };

    PieChart.prototype.handleMouseOver = function(e) {
      var $slice, angleDeg, angleRad, index, offset, r, series, width, x, y;
      if (this.tooltip != null) {
        return;
      }
      $slice = $(e.currentTarget);
      index = $slice.data('seriesIndex');
      series = this.meta.series[index];
      width = this.$el.width();
      offset = width / 2;
      r = offset * 0.8;
      angleDeg = series.tooltipAngle - 90;
      angleRad = angleDeg * (Math.PI / 180);
      x = offset + r * Math.cos(angleRad);
      y = offset + r * Math.sin(angleRad);
      this.tooltip = series.$tooltip.clone().appendTo(this.$el).css({
        left: x,
        top: y
      });
      return setTimeout(((function(_this) {
        return function() {
          if (_this.tooltip == null) {
            return;
          }
          return _this.tooltip.css({
            opacity: 1
          });
        };
      })(this)), 100);
    };

    PieChart.prototype.handleMouseOut = function(e) {
      var _ref;
      if ((_ref = this.tooltip) != null) {
        _ref.remove();
      }
      return this.tooltip = null;
    };

    PieChart.prototype.render = function() {
      var index, slice, _i, _len, _ref, _results;
      _ref = this.$el.find('.fill');
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        slice = _ref[index];
        _results.push(this.rotate($(slice), this.meta.slices[index].angle));
      }
      return _results;
    };

    PieChart.prototype.loadSeries = function() {
      var angle, index, item, series, skip, tooltipAngle, totalAngle, value, _i, _len, _ref, _results;
      this.meta.series = [];
      totalAngle = 0;
      _ref = this.data;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        item = _ref[index];
        if (skip) {
          continue;
        }
        series = {};
        if ((this.options.limit != null) && index === this.options.limit) {
          value = this.getCombinedValue(index, this.data.length);
          skip = true;
        } else {
          value = typeof item === 'object' ? item.value : item;
        }
        angle = this.getAngle(value);
        tooltipAngle = totalAngle + (angle / 2);
        series.id = index;
        series.value = value;
        series.color = typeof item === 'object' ? item.color : null;
        series.angle = angle;
        series.tooltipAngle = tooltipAngle;
        series.$tooltip = this.options.formatTooltipHtml(item);
        this.meta.series.push(series);
        _results.push(totalAngle += angle);
      }
      return _results;
    };

    PieChart.prototype.loadSlices = function() {
      var secondSliceAngle, secondSliceOffset, series, totalAngle, _i, _len, _ref, _results;
      this.meta.slices = [];
      totalAngle = 0;
      _ref = this.meta.series;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        series = _ref[_i];
        if (series.angle <= this.meta.maxSliceAngle) {
          this.meta.slices.push({
            position: series.id,
            offset: totalAngle,
            angle: series.angle,
            color: series.color ? series.color : void 0
          });
        } else {
          this.meta.slices.push({
            position: series.id,
            offset: totalAngle,
            angle: this.meta.maxSliceAngle,
            color: series.color ? series.color : void 0
          });
          secondSliceOffset = totalAngle + this.meta.maxSliceAngle;
          secondSliceAngle = series.angle - this.meta.maxSliceAngle;
          this.meta.slices.push({
            position: series.id,
            offset: secondSliceOffset,
            angle: secondSliceAngle,
            color: series.color ? series.color : void 0
          });
          this.meta.slices.push({
            position: series.id,
            offset: secondSliceOffset - 5,
            angle: secondSliceAngle > 5 ? 10 : 5 + secondSliceAngle,
            color: series.color ? series.color : void 0
          });
        }
        _results.push(totalAngle += series.angle);
      }
      return _results;
    };

    PieChart.prototype.getAngle = function(value) {
      return Math.round((value * this.meta.maxAngle) / 100);
    };

    PieChart.prototype.rotate = function($el, angle) {
      var value;
      value = "rotate(" + angle + "deg)";
      $el.css('-webkit-transform', value);
      $el.css('-moz-transform', value);
      $el.css('-ms-transform', value);
      $el.css('-o-transform', value);
      return $el.css('transform', value);
    };

    PieChart.prototype.getCombinedValue = function(firstIndex, lastIndex) {
      var combinedValue, item, _i, _len, _ref;
      combinedValue = 0;
      _ref = this.data.slice(firstIndex, +lastIndex + 1 || 9e9);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        combinedValue += typeof item === 'object' ? item.value : item;
      }
      return combinedValue;
    };

    return PieChart;

  })(ChartAbstract);

  module.exports = PieChart;

}).call(this);
