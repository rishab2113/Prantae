(function() {
  var GaugeChart, MeterChart, Raphael,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.$ == null) {
    window.$ = require('jquery-commonjs');
  }

  GaugeChart = require('./gauge_chart');

  Raphael = require('raphael-light');

  MeterChart = (function(_super) {
    __extends(MeterChart, _super);

    MeterChart.prototype.loadMeta = function() {
      return this.meta = $.extend({}, MeterChart.__super__.loadMeta.apply(this, arguments), {
        gaugeStartAngle: -225,
        railOffsetAngle: 90,
        notchStartAngle: -90,
        maxAngle: 180,
        maxOverflown: false,
        overflowAngle: 6
      });
    };

    function MeterChart() {
      MeterChart.__super__.constructor.apply(this, arguments);
      this.$el.addClass('pillow-meter');
      this.meta.overflowAngle = 6;
      if (this.options.value == null) {
        return;
      }
      this.notch = this.createElement('pillow-gauge-notch');
      this.setNotchRotation(this.meta.zeroAngle);
      this.meta.avgAngle = this.convertToAngle(this.options.avg);
      this.$el.append(this.notch);
    }

    MeterChart.prototype.createElement = function(className) {
      if (className === 'pillow-gauge-notch') {
        return this.createNotchElement();
      } else {
        return MeterChart.__super__.createElement.apply(this, arguments);
      }
    };

    MeterChart.prototype.createNotchElement = function() {
      var $notch, path, svg;
      $notch = $('<div></div>').addClass('pillow-gauge-notch');
      svg = Raphael($notch[0], 6, 65);
      path = svg.path('M6,61.2L6,61.2L3,0L0,61.1v0.1C0,63.3,1.3,65,3,65S6,63.3,6,61.2z');
      path.node.setAttribute('class', 'svg-notch');
      return $notch;
    };

    MeterChart.prototype.createAvgIndicator = function() {};

    MeterChart.prototype.createCaption = function() {};

    MeterChart.prototype.setCaption = function() {};

    MeterChart.prototype.setAvgIndicatorRotation = function(progress) {
      if (this.options.value == null) {
        return;
      }
      return this.setNotchRotation(this.getProgressAvgAngle(progress));
    };

    MeterChart.prototype.setNotchRotation = function(angle) {
      var maxAngle, notchAngle;
      maxAngle = this.meta.maxAngle;
      if (this.meta.maxOverflown) {
        maxAngle += this.meta.overflowAngle;
      }
      if (angle > maxAngle) {
        angle = maxAngle;
      }
      if (angle < this.meta.zeroAngle) {
        angle = this.meta.zeroAngle;
      }
      notchAngle = this.meta.notchStartAngle + angle;
      return this.rotate(this.notch, notchAngle);
    };

    MeterChart.prototype.normalizeParameters = function() {
      if (this.options.value > this.options.max) {
        this.meta.maxOverflown = true;
      }
      MeterChart.__super__.normalizeParameters.apply(this, arguments);
      this.options.avg = this.options.value;
      this.options.avgType = null;
      return this.meta.overflow = 0;
    };

    MeterChart.prototype.setGaugeProportions = function(angle) {
      var $gauge, $rail;
      $rail = this.rail[0];
      $gauge = this.gauge[0];
      $rail.classList.remove('third', 'half');
      $gauge.classList.remove('third', 'half');
      if (angle < 90) {
        $rail.classList.add('half');
        return $gauge.classList.add('third');
      } else {
        $rail.classList.add('half');
        return $gauge.classList.add('half');
      }
    };

    MeterChart.prototype.getProgressAngle = function(percentage) {
      return Math.round((this.meta.valueAngle + (this.meta.maxOverflown ? this.meta.overflowAngle : 0)) * percentage);
    };

    MeterChart.prototype.getProgressNotchAngle = function(percentage) {
      return Math.round((this.meta.avgAngle + (this.meta.maxOverflown ? this.meta.overflowAngle : 0)) * percentage);
    };

    return MeterChart;

  })(GaugeChart);

  module.exports = MeterChart;

}).call(this);
