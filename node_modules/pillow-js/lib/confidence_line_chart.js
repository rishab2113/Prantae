(function() {
  var ConfidenceLineChart, LineChart,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  LineChart = require('./line_chart');

  ConfidenceLineChart = (function(_super) {
    __extends(ConfidenceLineChart, _super);

    ConfidenceLineChart.prototype.defaults = {
      opacity: 0.2,
      stroke: 'grey',
      fill: 'grey'
    };

    function ConfidenceLineChart(options) {
      ConfidenceLineChart.__super__.constructor.apply(this, arguments);
      this.settings = $.extend(true, {}, this.defaults, options.confidenceInterval);
    }

    ConfidenceLineChart.prototype.drawSeries = function() {
      var confidenceHighLineSeries, confidenceLowLineSeries, confidencePath, index, lowSeries, mappedHighSeries, mappedLowSeries, mappedSeries, series, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
      _ref = this.data.series;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        series = _ref[index];
        if (series.length === 0) {
          continue;
        }
        mappedSeries = series.map((function(_this) {
          return function(pair) {
            return _this._mapCoordinatesToScreen(pair);
          };
        })(this));
        this.paper.path(this._getAreaForPoints(mappedSeries)).attr({
          stroke: 'none',
          fill: this.colors.areaShadeFills[index],
          opacity: this.colors.areaOpacity
        });
        this.paper.path(this.getLineForPoints(mappedSeries)).attr({
          fill: 'none',
          stroke: this.colors.series[index % this.colors.series.length],
          'stroke-width': ((_ref1 = this.layout.series) != null ? _ref1.stroke : void 0) != null ? this.layout.series.stroke : index === 0 && series.length < 75 ? '4px' : '2px'
        });
        confidenceHighLineSeries = this.getConfidenceLine(series, 'confidenceHigh');
        confidenceLowLineSeries = this.getConfidenceLine(series, 'confidenceLow');
        mappedHighSeries = confidenceHighLineSeries.map((function(_this) {
          return function(pair) {
            return _this._mapCoordinatesToScreen(pair);
          };
        })(this));
        mappedLowSeries = confidenceLowLineSeries.map((function(_this) {
          return function(pair) {
            return _this._mapCoordinatesToScreen(pair);
          };
        })(this));
        _ref2 = mappedLowSeries.slice(0).reverse();
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          lowSeries = _ref2[_j];
          mappedHighSeries.push(lowSeries);
        }
        mappedHighSeries.push(mappedHighSeries[0]);
        confidencePath = this.getLineForPoints(mappedHighSeries);
        _results.push(this.paper.path(confidencePath).attr({
          opacity: this.settings.opacity,
          stroke: this.settings.stroke,
          fill: this.settings.fill
        }));
      }
      return _results;
    };

    ConfidenceLineChart.prototype.getConfidenceLine = function(series, property) {
      var confidenceLine;
      confidenceLine = series.map(function(pair) {
        var point;
        point = {};
        point.x = pair.x;
        point.y = pair[property];
        return point;
      });
      return confidenceLine;
    };

    return ConfidenceLineChart;

  })(LineChart);

  module.exports = ConfidenceLineChart;

}).call(this);
